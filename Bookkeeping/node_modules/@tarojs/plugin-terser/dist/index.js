"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = (ctx, opts) => {
    ctx.modifyWebpackChain(({ chain }) => __awaiter(void 0, void 0, void 0, function* () {
        const { enableSourceMap = true } = opts;
        const { recursiveMerge } = ctx.helper;
        const TerserPlugin = require('terser-webpack-plugin');
        const defaultTerserOption = {
            keep_fnames: true,
            output: {
                comments: false,
                keep_quoted_props: true,
                quote_keys: true,
                beautify: false
            },
            warnings: false
        };
        const terser = ctx.initialConfig.terser;
        const isTerserEnabled = (terser && terser.enable === false)
            ? false
            : true;
        if (isTerserEnabled) {
            chain.merge({
                optimization: {
                    minimizer: [
                        new TerserPlugin({
                            cache: true,
                            parallel: true,
                            sourceMap: enableSourceMap,
                            terserOptions: recursiveMerge({}, defaultTerserOption, terser ? terser.config || {} : {})
                        })
                    ]
                }
            });
        }
    }));
};
